package test;



import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import main.java.utils.*;


import java.io.IOException;
import java.util.*;

import static io.restassured.RestAssured.given;

public class SampleTest extends Reporter {

    @Test(dataProvider = "updateStoreOrder")
    public void test_addStoreOrder(HashMap<String, String> map) {
        /* Adds a Store order */

        ExtentTest addStoreOrderTest = report.startTest("Update Store Order");


        HashMap<String, Object> testData = new HashMap<>();

        Object id = map.get("id");
        Object petId = map.get("userName");
        Object firstName = map.get("firstName");
        Object lastName = map.get("lastName");
        Object email = map.get("email");
        Object password = map.get("password");
        Object phoneNumber = map.get("phone");
        Object userStatus = map.get("1");

        //Get data needed for body
        testData.put("id", id);
        testData.put("petId", petId);
        testData.put("firstName", firstName);
        testData.put("lastName", lastName);
        testData.put("password", password);
        testData.put("phone", phoneNumber);
        testData.put("userStatus", userStatus);


        Response res = given()
                .contentType("application/json")
                .body(testData)


                .when()
                .put("https://petstore.swagger.io/v2/user/amol")

                .then()
                .statusCode(200)
                .log().body()
                .extract().response();


        try {
            CommonFunctions.assertStatusCode(res.getStatusCode(), map.get("ExpectedResponse"), "Status Code Check", addStoreOrderTest);
            CommonFunctions.assertValue(map.get("id"), res.jsonPath().getString("id"), "ID Check", addStoreOrderTest);
        } catch (AssertionError e) {
            addStoreOrderTest.log(LogStatus.INFO, res.body().toString());
            e.printStackTrace();
            Assert.fail();
        }

    }

    @DataProvider(name="updateStoreOrder")
    public static Iterator<Object[]> csvReader() throws IOException {

        List<Object[]> list = new ArrayList<Object[]>();

        int rows = ExcelUtility.getRowCount(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet);
        int colCount = ExcelUtility.getCellCount(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet, 1);
        int subtractRows = 1;
        String[] keys = new String[colCount];

        //Get keys for hash map
        for (int i=0; i<colCount; i++) {
            keys[i] = ExcelUtility.getCellData(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet, 0, i);
        }



        for (int i=0; i < rows; i ++) {
            if (ExcelUtility.getCellData(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet, i, 1).toLowerCase().contains("no")) {
                subtractRows ++;
            }
        }


        for (int row = 1; row < rows; row++) {

            if (ExcelUtility.getCellData(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet, row, 1).toLowerCase().contains("no")) {
                continue;
            }

            Map<String, String> testData = new HashMap<String, String>();
            int keyCounter = 0;
            for (int col = 0; col < colCount; col++) {

                testData.put(keys[keyCounter], ExcelUtility.getCellData(Constants.UpdateStoreOrderData, Constants.UpdateStoreOrderDataSheet, row, col));
                keyCounter ++;
            }

            list.add(new Object[] {testData});



        }


        return list.iterator();

    }



}